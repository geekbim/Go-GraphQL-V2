package interfaces

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"
	graph "go-graphql/app/generated"
	model "go-graphql/app/models"
)

// CreateQuestion is the resolver for the CreateQuestion field.
func (r *mutationResolver) CreateQuestion(ctx context.Context, question model.QuestionInput) (*model.QuestionResponse, error) {
	panic(fmt.Errorf("not implemented: CreateQuestion - CreateQuestion"))
}

// UpdateQuestion is the resolver for the UpdateQuestion field.
func (r *mutationResolver) UpdateQuestion(ctx context.Context, id string, question model.QuestionInput) (*model.QuestionResponse, error) {
	panic(fmt.Errorf("not implemented: UpdateQuestion - UpdateQuestion"))
}

// DeleteQuestion is the resolver for the DeleteQuestion field.
func (r *mutationResolver) DeleteQuestion(ctx context.Context, id string) (*model.QuestionResponse, error) {
	panic(fmt.Errorf("not implemented: DeleteQuestion - DeleteQuestion"))
}

// GetOneQuestion is the resolver for the GetOneQuestion field.
func (r *queryResolver) GetOneQuestion(ctx context.Context, id string) (*model.QuestionResponse, error) {
	panic(fmt.Errorf("not implemented: GetOneQuestion - GetOneQuestion"))
}

// GetAllQuestion is the resolver for the GetAllQuestion field.
func (r *queryResolver) GetAllQuestion(ctx context.Context) (*model.QuestionResponse, error) {
	panic(fmt.Errorf("not implemented: GetAllQuestion - GetAllQuestion"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
